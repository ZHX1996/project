from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

from wechatpy.utils import check_signature  
from wechatpy.exceptions import InvalidSignatureException
from wechatpy import parse_message, create_reply
from wechatpy.replies import BaseReply

import urllib.request
import json
# Create your views here.
TOKEN = 'ZHX1996'
appId = 'wx9ed3c52bf21b0684'
appSecret = '0eaac207a935e00aac6b22de95c7268d'

@csrf_exempt
def verify(request):
    if request.method == 'GET':
        signature = request.GET.get('signature', None)
        timestamp = request.GET.get('timestamp', None)
        nonce = request.GET.get('nonce', None)
        echostr = request.GET.get('echostr', None)
        try:  
            check_signature(TOKEN, signature, timestamp, nonce)  
        except InvalidSignatureException:  
            echostr = 'error'        
        response = HttpResponse(echostr, content_type="text/plain")
        return response
    else:
        getUrl = ("https://api.weixin.qq.com/cgi-bin/token?grant_type="
               "client_credential&appid=%s&secret=%s" % (appId, appSecret))
        urlResp = urllib.request.urlopen(getUrl)
        urlResp = json.loads(urlResp.read())
        accessToken = urlResp['access_token']
        
        postUrl = ("https://api.weixin.qq.com/cgi-bin/menu/create?access_token=%s" % accessToken)
        param = {
            "button": [
                {
                    "name": "扫码", 
                    "sub_button": [
                        {
                            "type": "scancode_waitmsg", 
                            "name": "扫码带提示", 
                            "key": "rselfmenu_0_0", 
                            "sub_button": [ ]
                        }, 
                        {
                            "type": "scancode_push", 
                            "name": "扫码推事件", 
                            "key": "rselfmenu_0_1", 
                            "sub_button": [ ]
                        }
                    ]
                }, 
                {
                    "name": "发图", 
                    "sub_button": [
                        {
                            "type": "pic_sysphoto", 
                            "name": "系统拍照发图", 
                            "key": "rselfmenu_1_0", 
                           "sub_button": [ ]
                         }, 
                        {
                            "type": "pic_photo_or_album", 
                            "name": "拍照或者相册发图", 
                            "key": "rselfmenu_1_1", 
                            "sub_button": [ ]
                        }, 
                        {
                            "type": "pic_weixin", 
                            "name": "微信相册发图", 
                            "key": "rselfmenu_1_2", 
                            "sub_button": [ ]
                        }
                    ]
                }, 
                {
                    "name": "发送位置", 
                    "type": "location_select", 
                    "key": "rselfmenu_2_0"
                },
                {
                   "type": "media_id", 
                   "name": "图片", 
                   "media_id": "MEDIA_ID1"
                }, 
                {
                   "type": "view_limited", 
                   "name": "图文消息", 
                   "media_id": "MEDIA_ID2"
                }
            ]
        }
        urlResp0 = urllib.request.Request(getUrl, param)
        urlResp01 = urllib.request.urlopen(urlResp0)
        
        msg = parse_message(request.body)       
        if msg.type == 'text':
            reply = create_reply(u'文本消息:' + msg.content, msg)
            
        elif msg.type == 'image':
            URL = msg.image
            articles = [
                        {
                         'title': '图片消息',
                         'description': '图片为',
                         'image': URL,
                         'url': URL
                         },                         
                        ]
            reply = create_reply(articles, msg)
            
        else:
            reply = create_reply(msg.type, msg)
            
    if not reply or not isinstance(reply, BaseReply):
        reply = create_reply('暂不支持其他操作', msg)
    
    response = HttpResponse(reply.render(), content_type = "application/xml")
    return response
            
            

